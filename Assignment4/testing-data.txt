interpreter, \x.(\y.y)x, (\x.((\y.y) x))                                                                                                                                                        
interpreter, (\x.a x) ((\x.x)b), (a ((\x.x) b))
interpreter, (\x.x) (1--2), 3.0
interpreter, (\x.x) (1---2), -1.0
interpreter, (\x.x + 1) 5, 6.0
interpreter, (\x.x * x) 3, 9.0
interpreter, (\x.\y.x + y) 3 4, 7.0
interpreter, 1-2*3-4, -9.0
interpreter, (\x.x * x) 2 * 3, 12.0
interpreter, (\x.x * x) (-2) * (-3), -12.0
interpreter, ((\x.x * x) (-2)) * (-3), -12.0
interpreter, (\x.x) (---2), -2.0
interpreter, if 0 then 2 else 1, 1.0
interpreter, if 1 then 2 else 2, 2.0
interpreter, if 0 then 2 else if 1 then 3 else 4, 3.0
interpreter, if 0 then 2 else if 0 then 3 else 4, 4.0
interpreter, if 0 == 0 then 5 else 6, 5.0
interpreter, if 0 <= 1 then 6 else 7, 6.0
interpreter, if 1 <= 0 then 6 else 7, 7.0
interpreter, let x = 1 in if x == 1 then 8 else 9, 8.0
interpreter, let x = 0 in if x == 1 then 8 else 9, 9.0
interpreter, let f = \x.x in f 10, 10.0
interpreter, let f = \x.x+1 in f 10, 11.0
interpreter, let f = \x.x*6 in let g = \x.x+1 in f (g 1), 12.0
interpreter, let f = \x.x*6 in let g = \x.x+1 in g (f 2), 13.0
interpreter, let f = \x.x*6 in let f = \x.x+1 in f (f 2) + 10, 14.0
interpreter, letrec f = \n. if n==0 then 1 else n*f(n-1) in f 4, 24.0
interpreter, letrec f = \n. if n==0 then 0 else 1 + 2*(n-1) + f(n-1) in f 6, 36.0
interpreter, 1, 1.0
interpreter, (if 1 == 1 then \x.x+1 else \x.x+2) 5 + 10, 16.0
interpreter, if 1 == 1 then 1 else 2 + 1, 1.0
interpreter, 1 ;; 2, 1.0 ;; 2.0
interpreter, 1 ;; 2 ;; 3, 1.0 ;; 2.0 ;; 3.0
interpreter, 1+1 ;; (\x.x)a ;; (\x.x+x)2, 2.0 ;; a ;; 4.0
interpreter, 1:2 ;; 1:2:#, (1.0 : 2.0) ;; (1.0 : (2.0 : #))
interpreter, (1), 1.0
interpreter, #, #
interpreter, 1:2:3:#, (1.0 : (2.0 : (3.0 : #)))
interpreter, (\x.x) #, #
interpreter, (\x.\y.x) 1:# a, (1.0 : #)
interpreter, (\x.\y.y) a 1:#, (1.0 : #)
interpreter, let f = \x.x+1 in (f 1) : (f 2) : (f 3) : #, (2.0 : (3.0 : (4.0 : #)))
interpreter, 1:2 == 1:2, 1.0
interpreter, 1:2 == 1:3, 0.0
interpreter, 1:2:# == 1:2:#, 1.0
interpreter, (1-2) : (2+2) : # == (-1):4:#, 1.0
interpreter, hd a, (hd a)
interpreter, hd (1:2:#), 1.0
interpreter, hd 1:2:#, 1.0
interpreter, tl a, (tl a)
interpreter, tl (1:2:#), (2.0 : #)
interpreter, tl 1:2:#, (2.0 : #)
interpreter, letrec map = \f. \xs. if xs==# then # else (f (hd xs)) : (map f (tl xs)) in (map (\x.x+1) (1:2:3:#)), (2.0 : (3.0 : (4.0 : #)))