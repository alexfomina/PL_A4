False | interpreter | Input: \x.(\y.y)x | Expected: (\x.((\y.y) x)) | Output: Evaluating: (\x.((\y.y) x))
 -> Lambda expression.
(\x.((\y.y) x))
False | interpreter | Input: (\x.a x) ((\x.x)b) | Expected: (a ((\x.x) b)) | Output: Evaluating: ((\x.(a x)) ((\x.x) b))
 -> Application detected.
Evaluating: (\x.(a x))
 -> Parenthesized expression.
Evaluating: (\x.(a x))
 -> Lambda expression.
 -> Evaluated function: (\x.(a x))
Evaluating: ((\x.x) b)
 -> Parenthesized expression.
Evaluating: ((\x.x) b)
 -> Application detected.
Evaluating: (\x.x)
 -> Parenthesized expression.
Evaluating: (\x.x)
 -> Lambda expression.
 -> Evaluated function: (\x.x)
Evaluating: b
 -> Variable: b
 -> Evaluated argument: b
 -> Applying lambda.
 -> Substituting x with b in x
Substituting: Replace x with b in x
 -> Variable matched: x replaced with b
 -> Result after substitution: b
Evaluating: b
 -> Variable: b
 -> Evaluated argument: b
 -> Applying lambda.
 -> Substituting x with b in (a x)
Substituting: Replace x with b in (a x)
 -> Substituting in application: (a x)
Substituting: Replace x with b in a
Substituting: Replace x with b in x
 -> Variable matched: x replaced with b
 -> Result after substitution: (a b)
Evaluating: (a b)
 -> Application detected.
Evaluating: a
 -> Variable: a
 -> Evaluated function: a
Evaluating: b
 -> Variable: b
 -> Evaluated argument: b
 -> Resulting application: (a b)
(a b)
False | interpreter | Input: (\x.x) (1--2) | Expected: 3.0 | Output: Evaluating: ((\x.x) (1.0 - (-2.0)))
 -> Application detected.
Evaluating: (\x.x)
 -> Parenthesized expression.
Evaluating: (\x.x)
 -> Lambda expression.
 -> Evaluated function: (\x.x)
Evaluating: (1.0 - (-2.0))
 -> Parenthesized expression.
Evaluating: (1.0 - (-2.0))
 -> Subtraction.
Evaluating: 1.0
 -> Number: 1.0
Evaluating: (-2.0)
 -> Negation.
Evaluating: 2.0
 -> Number: 2.0
 -> Evaluated argument: 3.0
 -> Applying lambda.
 -> Substituting x with 3.0 in x
Substituting: Replace x with 3.0 in x
 -> Variable matched: x replaced with 3.0
 -> Result after substitution: 3.0
Evaluating: 3.0
3.0
False | interpreter | Input: (\x.x) (1---2) | Expected: -1.0 | Output: Evaluating: ((\x.x) (1.0 - (-(-2.0))))
 -> Application detected.
Evaluating: (\x.x)
 -> Parenthesized expression.
Evaluating: (\x.x)
 -> Lambda expression.
 -> Evaluated function: (\x.x)
Evaluating: (1.0 - (-(-2.0)))
 -> Parenthesized expression.
Evaluating: (1.0 - (-(-2.0)))
 -> Subtraction.
Evaluating: 1.0
 -> Number: 1.0
Evaluating: (-(-2.0))
 -> Negation.
Evaluating: (-2.0)
 -> Negation.
Evaluating: 2.0
 -> Number: 2.0
 -> Evaluated argument: -1.0
 -> Applying lambda.
 -> Substituting x with -1.0 in x
Substituting: Replace x with -1.0 in x
 -> Variable matched: x replaced with -1.0
 -> Result after substitution: -1.0
Evaluating: -1.0
-1.0
False | interpreter | Input: (\x.x + 1) 5 | Expected: 6.0 | Output: Evaluating: ((\x.(x + 1.0)) 5.0)
 -> Application detected.
Evaluating: (\x.(x + 1.0))
 -> Parenthesized expression.
Evaluating: (\x.(x + 1.0))
 -> Lambda expression.
 -> Evaluated function: (\x.(x + 1.0))
Evaluating: 5.0
 -> Number: 5.0
 -> Evaluated argument: 5.0
 -> Applying lambda.
 -> Substituting x with 5.0 in (x + 1.0)
Substituting: Replace x with 5.0 in (x + 1.0)
 -> Result after substitution: (x + 1.0)
Evaluating: (x + 1.0)
 -> Addition.
Evaluating: x
 -> Variable: x
Evaluating: 1.0
 -> Number: 1.0
Error: Traceback (most recent call last):
  File "/Users/rorysullivan/Desktop/PL_A4/Assignment4/interpreter.py", line 389, in <module>
    main()
  File "/Users/rorysullivan/Desktop/PL_A4/Assignment4/interpreter.py", line 385, in main
    result = interpret(expression)
             ^^^^^^^^^^^^^^^^^^^^^
  File "/Users/rorysullivan/Desktop/PL_A4/Assignment4/interpreter.py", line 10, in interpret
    result_ast = evaluate(ast)
                 ^^^^^^^^^^^^^
  File "/Users/rorysullivan/Desktop/PL_A4/Assignment4/interpreter.py", line 207, in evaluate
    return evaluate(substituted)  # Continue evaluating the resulting expression
           ^^^^^^^^^^^^^^^^^^^^^
  File "/Users/rorysullivan/Desktop/PL_A4/Assignment4/interpreter.py", line 222, in evaluate
    return evaluate(tree[1]) + evaluate(tree[2])
           ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
TypeError: can only concatenate tuple (not "float") to tuple
